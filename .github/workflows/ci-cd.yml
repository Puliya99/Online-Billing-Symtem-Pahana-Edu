name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - dev
      - main

jobs:
  # Validate merges to main branch must come from dev
  merge-validation-main:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Validate Merge to Main
        run: |
          if [[ "${{ github.head_ref }}" != "dev" ]]; then
            echo "Error: Pull requests to main must be from the dev branch"
            exit 1
          fi

  # Run all tests
  run-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run Unit Tests
        run: mvn -B -ntp test
      - name: Archive Test Reports
        if: always()
        run: |
          if [ -d "target/surefire-reports" ]; then
            tar -czf surefire-reports.tar.gz target/surefire-reports/
            echo "Test reports archived as surefire-reports.tar.gz"
          else
            echo "No surefire-reports directory found"
          fi
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: surefire-reports.tar.gz
          if-no-files-found: ignore
          retention-days: 7

  # Build the project (after tests pass)
  build:
    runs-on: ubuntu-latest
    needs: run-tests
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build Project
        run: mvn -B -ntp clean package -DskipTests
      - name: List Target Directory
        run: |
          echo "Listing files in target directory:"
          ls -la target/ || true
      - name: Archive Build Artifacts (WAR/JAR)
        uses: actions/upload-artifact@v4
        with:
          name: build-package
          path: |
            target/*.war
            target/*.jar
          if-no-files-found: warn
          retention-days: 7

  # Deploy to development environment (pushes to dev)
  deploy-to-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    environment: development
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-package
          path: build-artifacts
      - name: Show Artifacts
        run: |
          echo "Artifacts downloaded to build-artifacts:"
          ls -la build-artifacts || true
      - name: Deploy to Development Environment
        run: |
          echo "Deploying to development environment from dev branch"
          echo "Replace this step with real deployment commands (e.g., scp build-artifacts/*.war user@dev:/path)"

  # Deploy to production environment (pushes to main)
  deploy-to-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-package
          path: build-artifacts
      - name: Show Artifacts
        run: |
          echo "Artifacts downloaded to build-artifacts:"
          ls -la build-artifacts || true
      - name: Deploy to Production
        run: |
          echo "Deploying to production environment from main branch"
          echo "Replace this step with real deployment commands (e.g., scp build-artifacts/*.war user@prod:/path)"
